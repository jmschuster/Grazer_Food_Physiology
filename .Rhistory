shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
aov_residuals <- residuals(object = Mfra_W7)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
Mfra<-Mfra %>% filter(res2.VO2.WW<0.6 & res2.VO2.WW >-0.6) # remove 2 outliers (row 16 and 37 of full Mfra df)
Mfra7<-Mfra7 %>% filter(res2.VO2.WW<1 & res2.VO2.WW >-0.44) # remove 2 outliers
# Week 2
grubbs.test(Mfra$res2.VO2.WW) # outlier test
# Week 7
grubbs.test(Mfra7$res2.VO2.WW) # outlier test
grubbs.test(Mfra7$res2.VO2.WW, opposite=TRUE) # outlier test (lowest)
View(Mfra)
View(Mfra7)
Mfra_W2<-aov(res2.VO2.WW ~ Treatment, data = Mfra) # Week 2
Mfra_W7<-aov(res2.VO2.WW ~ Treatment, data = Mfra7) # Week 7
aov_residuals <- residuals(object = Mfra_W2)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
aov_residuals <- residuals(object = Mfra_W7)
shapiro.test(x = aov_residuals )
# Non-parametric test of treatment differences in Week 2
kruskal.test(res2.VO2.WW ~ Treatment, data = Mfra) # KW test for multiple treatment levels
# Test which treatment levels are different:
wilcox_test(res2.VO2.WW ~ Treatment, data = Mfra, p.adjust.method = "bonferroni")
wilcox_test(res2.VO2.WW ~ Treatment, data = Mfra, p.adjust.method = "bonferroni")
# Parametric test of treatment differences in Week 7
summary(Mfra_W7)
TukeyHSD(Mfra_W7, which = "Treatment")
########## STRONGYLOCENTROTUS PURPURATUS
# Subset for species, remove measurements with r squared <0.90, separate df for each week
Spur<-CageExpSub %>% filter(Common_Name=='Purple sea urchin' & rsqrt>=0.90 & Week=='Week 2')
Spur7<-CageExpSub %>% filter(Common_Name=='Purple sea urchin' & rsqrt>=0.90 & Week=='Week 7')
Spur_W2<-aov(res2.VO2.WW ~ Treatment, data = Spur) # Week 2
Spur_W7<-aov(res2.VO2.WW ~ Treatment, data = Spur7) # Week 7
aov_residuals <- residuals(object = Spur_W2)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
aov_residuals <- residuals(object = Spur_W7)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
Spur<-Spur %>% filter(res2.VO2.WW<4) # remove 1 outliers (row 102 of full Spur df)
Spur7<-Spur7 %>% filter(res2.VO2.WW<2 & res2.VO2.WW >-1.6) # remove 2 outliers
# Week 2
grubbs.test(Spur$res2.VO2.WW) # outlier test; highest val is outlier
# Week 7
grubbs.test(Spur7$res2.VO2.WW) # outlier test
grubbs.test(Spur7$res2.VO2.WW, opposite=TRUE) # outlier test (lowest)
Spur_W2<-aov(res2.VO2.WW ~ Treatment, data = Spur) # Week 2
Spur_W7<-aov(res2.VO2.WW ~ Treatment, data = Spur7) # Week 7
aov_residuals <- residuals(object = Spur_W2)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
aov_residuals <- residuals(object = Spur_W7)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
Spur_W2<-aov(res2.VO2.WW ~ Treatment, data = Spur) # Week 2
Spur_W7<-aov(res2.VO2.WW ~ Treatment, data = Spur7) # Week 7
# Tukeys post hoc for Week 2 (Week 2 Spur data meets assumptions after outlier is removed)
TukeyHSD(Spur_W2, which = "Treatment")
# Tukeys post hoc for Week 2 (Week 2 Spur data meets assumptions after outlier is removed)
summary(Spur_W2)
TukeyHSD(Spur_W2, which = "Treatment")
# Non-parametric test of treatment differences Week 7
kruskal.test(res2.VO2.WW ~ Treatment, data = Spur7) # KW test for multiple treatment levels
wilcox_test(res2.VO2.WW ~ Treatment, data = Spur7, p.adjust.method = "bonferroni")
########## POMAULAX GIBBEROSUS
# Subset for species, remove measurements with r squared <0.90, separate df for each week
Pgib<-CageExpSub %>% filter(Common_Name=='Red turban snail' & rsqrt>=0.90 & Week=='Week 2')
Pgib7<-CageExpSub %>% filter(Common_Name=='Red turban snail' & rsqrt>=0.90 & Week=='Week 7')
Pgib_W2<-aov(res2.VO2.WW ~ Treatment, data = Pgib) # Week 2
Pgib_W7<-aov(res2.VO2.WW ~ Treatment, data = Pgib7) # Week 7
aov_residuals <- residuals(object = Pgib_W2)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
Pgib<-Pgib %>% filter(res2.VO2.WW<0.2 & res2.VO2.WW >-0.55) # remove 14 outliers
Pgib7<-Pgib7 %>% filter(res2.VO2.WW<0.4 & res2.VO2.WW>-0.7) # remove 5 outliers
# Week 2
grubbs.test(Pgib$res2.VO2.WW) # outlier test
# Week 7
grubbs.test(Pgib7$res2.VO2.WW) # outlier test; repeat after removing each outlier IDd (one at a time)
grubbs.test(Pgib7$res2.VO2.WW, opposite=TRUE) # outlier test (lowest)
Pgib_W2<-aov(res2.VO2.WW ~ Treatment, data = Pgib) # Week 2
Pgib_W7<-aov(res2.VO2.WW ~ Treatment, data = Pgib7) # Week 7
aov_residuals <- residuals(object = Pgib_W2)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
aov_residuals <- residuals(object = Pgib_W7)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
# Tukeys post hoc for Week 2 (Week 2 Pgib data meets assumptions after outliers are removed)
summary(Pgib_W2)
TukeyHSD(Pgib_W2, which = "Treatment")
# Non-parametric test of treatment differences; Week 7
kruskal.test(res2.VO2.WW ~ Treatment, data = Pgib7) # KW test for multiple treatment levels
wilcox_test(res2.VO2.WW ~ Treatment, data = Pgib7, p.adjust.method = "bonferroni")
Pgib_all<-rbind(Pgib,Pgib7) # make Pgib df with outliers removed (for sensitivity analysis below)
####### TEGULA PULLIGO
# Subset for species, remove measurements with r squared <0.90, separate df for each week
Tpul<-CageExpSub %>% filter(Common_Name=='Dusky turban snail' & rsqrt>=0.90 & Week=='Week 2')
Tpul7<-CageExpSub %>% filter(Common_Name=='Dusky turban snail' & rsqrt>=0.90 & Week=='Week 7')
Tpul$res2.VO2.WW.Ind<-(Tpul$res2.VO2.WW/Tpul$N_Dusky) # calc individual avrg MO2 (as multiple duskys per chamber)
Tpul7$res2.VO2.WW.Ind<-(Tpul7$res2.VO2.WW/Tpul7$N_Dusky) # calc individual avrg MO2 (as multiple duskys per chamber)
Tpul_W2<-aov(res2.VO2.WW.Ind ~ Treatment, data = Tpul) # Week 2
Tpul_W7<-aov(res2.VO2.WW.Ind ~ Treatment, data = Tpul7) # Week 7
aov_residuals <- residuals(object = Tpul_W2)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
Tpul<-Tpul %>% filter(res2.VO2.WW.Ind<0.2) # remove 2 outliers (row 16 and 37 of full Tpul df)
# Week 2
grubbs.test(Tpul$res2.VO2.WW.Ind) # outlier test
Tpul_W2<-aov(res2.VO2.WW.Ind ~ Treatment, data = Tpul) # Week 2
Tpul_W7<-aov(res2.VO2.WW.Ind ~ Treatment, data = Tpul7) # Week 7
aov_residuals <- residuals(object = Tpul_W2)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
grubbs.test(Tpul7$res2.VO2.WW.Ind) # outlier test
Tpul_W2<-aov(res2.VO2.WW.Ind ~ Treatment, data = Tpul) # Week 2
Tpul_W7<-aov(res2.VO2.WW.Ind ~ Treatment, data = Tpul7) # Week 7
aov_residuals <- residuals(object = Tpul_W2)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
aov_residuals <- residuals(object = Tpul_W7)
shapiro.test(x = aov_residuals ) # if p < 0.05; normality is violated
# Parametric test for Week 2 & Week 7
summary(Tpul_W2)
TukeyHSD(Tpul_W2, which = "Treatment")
summary(Tpul_W7)
View(Pgib7)
View(Spur7)
# Kaplan-Meier Survival function - Grazer heat resistance - differences across treatment:
km_heat <- survfit(Surv(LOE_sec) ~ Treatment_Name+Species_Name, data=CTmax) # overall model; no censored observations!
km_heat_Spur <- survfit(Surv(LOE_sec) ~ Treatment_Name, data=subset(CTmax,Species_Name=="Strongylocentrotus purpuratus"))
km_heat_Mfra <- survfit(Surv(LOE_sec) ~ Treatment_Name, data=subset(CTmax,Species_Name=="Mesocentrotus franciscanus"))
km_heat_Pgib <- survfit(Surv(LOE_sec) ~ Treatment_Name, data=subset(CTmax,Species_Name=="Pomaulax gibberosus"))
km_heat_Tpul <- survfit(Surv(LOE_sec) ~ Treatment_Name, data=subset(CTmax,Species_Name=="Tegula pulligo"))
# Statistical difference between treatments:
survdiff(Surv(LOE_sec) ~ Treatment_Name, data=subset(CTmax,Species_Name=="Strongylocentrotus purpuratus")) # no diff
# Kaplan-Meier survival function - Grazer heat resistance - differences across species:
km_heat_Species<-survfit(Surv(LOE_sec) ~ Species_Name, data=CTmax)
survdiff(Surv(LOE_sec) ~ Species_Name, data = CTmax)
# Statistical difference between treatments:
survdiff(Surv(LOE_sec) ~ Treatment_Name, data=subset(CTmax,Species_Name=="Strongylocentrotus purpuratus")) # no diff
survdiff(Surv(LOE_sec) ~ Treatment_Name, data=subset(CTmax,Species_Name=="Mesocentrotus franciscanus")) # no diff
18*3
kruskal.test(WetWeight_g ~ Treatment, data = subset(GrazerWeights,Common_Name=='Red sea urchin' & Week=='Week 0' & WetWeight_g<70))
aov_residuals <- residuals(object = Mfra_Sub)
shapiro.test(x = aov_residuals ) # p < 0.05, normality is violated
# Stats for mass-independent MO2 of subset:
Mfra_Sub<-aov(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<70)) # Week 2
Mfra_Sub<-aov(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<70)) # Week 2
# Shapiro-Wilko test for normality
aov_residuals <- residuals(object = Mfra_Sub)
shapiro.test(x = aov_residuals ) # p < 0.05, normality is violated
Mfra_Sub7<-aov(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<70)) # Week 2
# Stats for mass-independent MO2 of subset:
Mfra_Sub<-aov(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<70)) # Week 2
Mfra_Sub7<-aov(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<70)) # Week 2
aov_residuals <- residuals(object = Mfra_Sub)
shapiro.test(x = aov_residuals ) # p < 0.05, normality is violated
aov_residuals <- residuals(object = Mfra_Sub7)
shapiro.test(x = aov_residuals ) # p < 0.05, normality is violated
# Week 2 subset violates normality; Week 7 subset does not
summary(Mfra_Sub7)
# Non-parametric test of treatment differences Week 2
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,Common_Name=='Red sea urchin' & rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<70)) # KW test for multiple treatment levels; WEEK 2
wilcox_test(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,Common_Name =='Red sea urchin' & rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<70),p.adjust.method = "bonferroni") # WEEK 2
# Test which treatment levels are different Week 7 (parametric)
TukeyHSD(Mfra_Sub, which = "Treatment")
# Test which treatment levels are different Week 7 (parametric)
TukeyHSD(Mfra_Sub7, which = "Treatment")
# Non-parametric test of treatment differences Week 2
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,Common_Name=='Red sea urchin' & rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<70)) # KW test for multiple treatment levels; WEEK 2
# Stats for mass-independent MO2 of subset:
Pgib_Sub<-aov(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<40)) # Week 2
Pgib_Sub7<-aov(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<40)) # Week 7
aov_residuals <- residuals(object = Pgib_Sub)
shapiro.test(x = aov_residuals ) # p < 0.05, normality is violated
aov_residuals <- residuals(object = Pgib_Sub7)
shapiro.test(x = aov_residuals ) # p < 0.05, normality is violated
# Parametric test of treatment diff (Week 2)
summary(Pgib_Sub)
TukeyHSD(Pgib_Sub,which='Treatment')
# Non-parametric test of treatment differences (Week 7)
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,Common_Name=='Red turban snail' & rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<40)) # KW test for multiple treatment levels
# Non-parametric test of treatment differences Week 2
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,Common_Name=='Red sea urchin' & rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<70)) # KW test for multiple treatment levels; WEEK 2
# Parametric test of treatment diff (Week 2)
summary(Pgib_Sub7)
TukeyHSD(Pgib_Sub7,which='Treatment')
# Parametric test of treatment diff (Week 2)
summary(Pgib_Sub)
TukeyHSD(Pgib_Sub,which='Treatment')
# Non-parametric test of treatment differences (Week 7)
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,Common_Name=='Red turban snail' & rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<40)) # KW test for multiple treatment levels
wilcox_test(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,Common_Name =='Red turban snail' & rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<40),p.adjust.method = "bonferroni")
# Non-parametric test of treatment differences (Week 7)
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,Common_Name=='Red turban snail' & rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<40)) # KW test for multiple treatment levels
# Non-parametric test of treatment differences Week 2
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,Common_Name=='Red sea urchin' & rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<70)) # KW test for multiple treatment levels; WEEK 2
# Test which treatment levels are different:
wilcox_test(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,Common_Name =='Red sea urchin' & rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<70),p.adjust.method = "bonferroni") # WEEK 2
wilcox_test(res2.VO2.WW ~ Treatment, data = subset(Mfra_all,Common_Name =='Red sea urchin' & rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<70),p.adjust.method = "bonferroni") # WEEK 2
View(Mfra_all)
View(Pgib_all)
# Parametric test of treatment diff (Week 2)
summary(Pgib_Sub)
# Week 2 subset violates normality; Week 7 subset does not
summary(Mfra_Sub7)
kruskal.test(WetWeight_g ~ Treatment, data = subset(GrazerWeights,Common_Name=='Red turban snail' & Week=='Week 0' & WetWeight_g<40)) # NO MASS DIFFERENCES ACROSS TREATMENTS HERE
kruskal.test(WetWeight_g ~ Treatment, data = subset(GrazerWeights,Common_Name=='Red turban snail' & Week=='Week 0' & WetWeight_g<50)) # NO MASS DIFFERENCES ACROSS TREATMENTS HERE
kruskal.test(WetWeight_g ~ Treatment, data = subset(GrazerWeights,Common_Name=='Red turban snail' & Week=='Week 0' & WetWeight_g<45)) # NO MASS DIFFERENCES ACROSS TREATMENTS HERE
View(Pgib_all)
Pgib_Sub<-aov(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<45)) # Week 2
Pgib_Sub7<-aov(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<45)) # Week 7
aov_residuals <- residuals(object = Pgib_Sub)
shapiro.test(x = aov_residuals ) # p < 0.05, normality is violated
aov_residuals <- residuals(object = Pgib_Sub7)
shapiro.test(x = aov_residuals ) # p < 0.05, normality is violated
summary(Pgib_Sub)
TukeyHSD(Pgib_Sub,which='Treatment')
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,Common_Name=='Red turban snail' & rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<45)) # KW test for multiple treatment levels
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,Common_Name=='Red turban snail' & rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<40)) # KW test for multiple treatment levels
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,Common_Name=='Red turban snail' & rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<50)) # KW test for multiple treatment levels
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,Common_Name=='Red turban snail' & rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<60)) # KW test for multiple treatment levels
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,Common_Name=='Red turban snail' & rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<70)) # KW test for multiple treatment levels
kruskal.test(WetWeight_g ~ Treatment, data = subset(GrazerWeights,Common_Name=='Red turban snail' & Week=='Week 0' & WetWeight_g<70)) # NO MASS DIFFERENCES ACROSS TREATMENTS HERE
kruskal.test(WetWeight_g ~ Treatment, data = subset(GrazerWeights,Common_Name=='Red turban snail' & Week=='Week 0' & WetWeight_g<80)) # NO MASS DIFFERENCES ACROSS TREATMENTS HERE
kruskal.test(WetWeight_g ~ Treatment, data = subset(GrazerWeights,Common_Name=='Red turban snail' & Week=='Week 0' & WetWeight_g<60)) # NO MASS DIFFERENCES ACROSS TREATMENTS HERE
kruskal.test(WetWeight_g ~ Treatment, data = subset(GrazerWeights,Common_Name=='Red turban snail' & Week=='Week 0' & WetWeight_g<50)) # NO MASS DIFFERENCES ACROSS TREATMENTS HERE
kruskal.test(WetWeight_g ~ Treatment, data = subset(GrazerWeights,Common_Name=='Red turban snail' & Week=='Week 0' & WetWeight_g<40)) # NO MASS DIFFERENCES ACROSS TREATMENTS HERE
kruskal.test(WetWeight_g ~ Treatment, data = subset(GrazerWeights,Common_Name=='Red turban snail' & Week=='Week 0' & WetWeight_g<35)) # NO MASS DIFFERENCES ACROSS TREATMENTS HERE
kruskal.test(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,Common_Name=='Red turban snail' & rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<35)) # KW test for multiple treatment levels
12*3
41-23
# Stats for mass-independent MO2 of subset:
Pgib_Sub<-aov(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,rsqrt>=0.9 & Week=='Week 2' & WetWeight_g<40)) # Week 2
Pgib_Sub7<-aov(res2.VO2.WW ~ Treatment, data = subset(Pgib_all,rsqrt>=0.9 & Week=='Week 7' & WetWeight_g<40)) # Week 7
aov_residuals <- residuals(object = Pgib_Sub7)
shapiro.test(x = aov_residuals ) # p < 0.05, normality is violated
# Parametric test of treatment diff (Week 2)
summary(Pgib_Sub)
summary(Pgib_Sub7)
TukeyHSD(Pgib_Sub7,which='Treatment')
Pgib_Diff<-Pgib_all %>% filter(WetWeight_g <40) %>% group_by(Week,Treatment) %>%
dplyr::summarize(mean=mean(res2.VO2.WW),sd=sd(res2.VO2.WW)) %>%
ungroup() %>% tidyr::drop_na()
View(Pgib_Diff)
Pgib_Diff$mean<-Pgib_Diff$mean+1
ggplot(URCHINS,aes(x=ScientificName,y=log(TotalCount+1),fill=Status))+geom_boxplot(outlier.shape=NA)+facet_wrap(~IslandName,scales='free')+theme_JMS()+theme(axis.text.x=element_text(angle=90))
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(rmarkdown);library(knitr); library(dplyr); library(ggplot2); library(grid); library(tidyverse);library(lubridate);library(ggpubr); library('sf'); library('rnaturalearth'); library('rnaturalearthdata');library('rnaturalearthhires'); library(rgeos); library(ggspatial); library(ggrepel); library(here)
theme_JMS <- function () {
theme_bw(base_size = 12, base_family = "Arial") + theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12, face = "plain"),
legend.text = element_text(size = 12, face = "plain"),
legend.title = element_text(size = 14, face = "bold")
)
}
Quadrat1m<-read.csv("1mQUADRAT.csv") # 1x1 quadrats along 100m transect (x12) of selected sedentary spp & kelp/hiding fish; abundance/density; once per year; 27 species (incl 4 fishes)
Quadrat5m<-read.csv("5mQUADRAT.csv") # 5x1m quadrats along 100m transect (x20) of rare, clumped sedentary spp (indicator algae and giant seastar); once per year
GORGONIANS<-read.csv("GORGONIANS.csv")
KELP<-read.csv("KELP.csv") # Macrocystis kelp time series (1984-2017) at 35 sites across 6 islands
KFM_ARMS_Summary_92_17<-read.csv("KFM_ARMs_Summary_1992-2017.csv") # size frequency sampling (artificial recruitment modules) of select spp. (20 invert spp)
KFM_RovingDiverFishCount_82_17<-read.csv("KFM_RovingDiverFishCount_Summary_1982-2017.csv") #10m to each side of transect; diversity and abundance of fishes (abundance score and actual count); 119 fish species; 180 common names
KFM_VisualFishTransect_82_17<-read.csv("KFM_VisualFishTransect_RawData_1985-2017.csv") # similar to RLS M1, 2x3m block along 50m transect; abundance of selected fish; 13 species of fish (separate sex/age for some)
DailyMean<-read.csv('KFM_Temperature_Mean_Daily.csv')
DailyMean<-read.csv('KFM_Temperature_Mean_Daily.csv')
KFM_SpeciesName<-read.csv('KFM_SpeciesName.csv')
# Updated species names:
Current_Taxonomy<-read.csv("CI_taxonomy.csv")
Current_Taxonomy$old_name <- gsub("_", " ", Current_Taxonomy$old_name)
Current_Taxonomy$current_sci_name <- gsub("_", " ", Current_Taxonomy$current_sci_name)
Current_Taxonomy$old_name<-as.factor(Current_Taxonomy$old_name)
Quadrat1m<-left_join(Quadrat1m, Current_Taxonomy ,by=c('ScientificName'= 'old_name'))
# Reorganize Island Order (warm to cold)
KELP$IslandName <- factor(KELP$IslandName,
levels = c("San Clemente Island",'Santa Barbara Island',"Anacapa Island",
"Santa Cruz Island", "Santa Rosa Island",
'San Miguel Island')) # order from warmest (left) to coldest (right) island
KELP<-KELP %>%
mutate(Status = case_when(
SurveyYear <= 1996 ~ "Before El Niño",
SurveyYear > 1996 & SurveyYear< 1999 ~ "El Niño",
SurveyYear >= 1999 ~ "After El Niño"))
KELP$Status<-as.factor(KELP$Status)
KELP$Status <- factor(KELP$Status,
levels = c("Before El Niño",'El Niño',"After El Niño"))
URCHINS<-Quadrat1m %>% filter(ScientificName %in% c("Centrostephanus coronatus","Strongylocentrotus franciscanus","Strongylocentrotus purpuratus","Lytechinus anamesus")) %>% droplevels()
levels(URCHINS$ScientificName)[levels(URCHINS$ScientificName)=="Strongylocentrotus franciscanus"] <- "Mesocentrotus franciscanus"
# Order islands from warmest (left) to coolest (right) island
DailyMean$IslandName<-as.factor(DailyMean$IslandName)
DailyMean$IslandName <- factor(DailyMean$IslandName,
levels = c("San Clemente Island",'Santa Barbara Island',"Anacapa Island",
"Santa Cruz Island", "Santa Rosa Island",
'San Miguel Island'))
# Rate of Temp Change
DailyMean <- DailyMean[order(DailyMean$SiteCode, DailyMean$Date), ] # make sure dates are ordered consecutively for each site
# Rate of Temp Change
DailyMean <- DailyMean[order(DailyMean$SiteCode, DailyMean$Date), ] # make sure dates are ordered consecutively for each site
DailyDiff<-DailyMean %>%
group_by(SiteCode) %>%
mutate(DailyDiff = AvgOfTemp_C - lag(AvgOfTemp_C))
# DAILY TEMP FOR GIVEN YEAR
DailyMean$Date<-as.Date(DailyMean$Date, "%Y-%m-%d")
# DAILY TEMP FOR GIVEN YEAR
DailyMean$Date<-as.Date(DailyMean$Date, "%Y-%m-%d")
DailyMean$Date2 <- format(DailyMean$Date, format = "%m-%d")
# Rate of Temp Change
DailyMean <- DailyMean[order(DailyMean$SiteCode, DailyMean$Date), ] # make sure dates are ordered consecutively for each site
DailyDiff<-DailyMean %>%
group_by(SiteCode) %>%
mutate(DailyDiff = AvgOfTemp_C - lag(AvgOfTemp_C))
# DAILY TEMP FOR GIVEN YEAR
DailyMean$Date<-as.Date(DailyMean$Date, "%Y-%m-%d")
DailyMean$Date2 <- format(DailyMean$Date, format = "%m-%d")
# DAILY TEMP FOR GIVEN YEAR
ggplot(data=subset(DailyMean,Year=='1998'),aes(x=as.factor(Date),y=AvgOfTemp_C))+geom_point()+
facet_wrap(~IslandName)+stat_summary(aes(y = AvgOfTemp_C,group=1), fun=mean,
colour="orange", geom="line",group=1,lwd=1.2)+ggtitle("1998")+
theme_bw(base_size=15)+ylab('Temperature °C')+xlab("Date")+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# FREQUENCY OF EXTREME RATES OF CHANGE
# El Nino Years
# El Nino Years
DailyMean<-DailyMean %>%
mutate(Status = case_when(
Year <= 1996 ~ "Before El Niño",
Year > 1996 & Year< 1999 ~ "El Niño",
Year >= 1999 ~ "After El Niño"))
DailyMean$Status<-as.factor(DailyMean$Status)
DailyMean$Status <- factor(DailyMean$Status,
levels = c("Before El Niño",'El Niño',"After El Niño"))
DailyDiff$Status<-as.factor(DailyDiff$Status)
DailyDiff$Status <- factor(DailyDiff$Status,
levels = c("Before El Niño",'El Niño',"After El Niño"))
DailyMean$Status<-as.factor(DailyMean$Status)
DailyMean$Status <- factor(DailyMean$Status,
levels = c("Before El Niño",'El Niño',"After El Niño"))
DailyDiff$Status<-as.factor(DailyDiff$Status)
DailyDiff<-DailyMean %>%
group_by(SiteCode) %>%
mutate(DailyDiff = AvgOfTemp_C - lag(AvgOfTemp_C))
DailyDiff<-DailyDiff %>%
mutate(Status = case_when(
Year <= 1996 ~ "Before El Niño",
Year > 1996 & Year< 1999 ~ "El Niño",
Year >= 1999 ~ "After El Niño"))
DailyMean$Status<-as.factor(DailyMean$Status)
DailyDiff$Status<-as.factor(DailyDiff$Status)
DailyDiff$Status <- factor(DailyDiff$Status,
levels = c("Before El Niño",'El Niño',"After El Niño"))
# RANGE OF TEMP PER YEAR; FULL TIME SERIES
DailyMean %>% dplyr::summarize(mean_Temp=mean(AvgOfTemp_C), median_Temp=median(AvgOfTemp_C)) # average temp across whole time-series
# Summarising annual temps
YearlyTemp<-DailyMean %>% group_by(SiteCode,Year) %>% dplyr::summarise(
Mean_C=mean(AvgOfTemp_C),Max_C=max(AvgOfTemp_C),Min_C=min(AvgOfTemp_C)) %>% ungroup()
KELP<-left_join(KELP,YearlyTemp,by=c('SiteCode'='SiteCode','SurveyYear'='Year'))
URCHINS<-left_join(URCHINS,YearlyTemp,by=c('SiteCode'='SiteCode','SurveyYear'='Year'))
# El Nino Years
DailyDiff<-DailyDiff %>%
mutate(Status = case_when(
Year <= 1996 ~ "Before El Niño",
Year > 1996 & Year< 1999 ~ "El Niño",
Year >= 1999 ~ "After El Niño"))
DailyDiff$Status<-as.factor(DailyDiff$Status)
DailyDiff$Status <- factor(DailyDiff$Status,
levels = c("Before El Niño",'El Niño',"After El Niño"))
View(DailyDiff)
### Need to fix monthly differences because of missing months!
MonthlyTest<-expand.grid(MonthlyTemp$Year,MonthlyTemp$Month)
### ANNUAL URCHIN CHANGE
# First, complete dataset so there's an NA record for every year and every species at every site
# (so we don't calculate difference over a multi-year gap)
URCHINS<-URCHINS %>%
mutate(Status = case_when(
SurveyYear <= 1996 ~ "Before El Niño",
SurveyYear > 1996 & SurveyYear< 1999 ~ "El Niño",
SurveyYear >= 1999 ~ "After El Niño"))
URCHINS$Status<-as.factor(URCHINS$Status)
URCHINS$Status <- factor(URCHINS$Status,
levels = c("Before El Niño",'El Niño',"After El Niño"))
#URCHINS$SurveyYear<-as.factor(URCHINS$SurveyYear)
URCHINS$ScientificName<-as.factor(URCHINS$ScientificName)
URCHINS$current_sci_name<-as.factor(URCHINS$current_sci_name)
ggplot(URCHINS,aes(x=ScientificName,y=log(TotalCount+1),fill=Status))+geom_boxplot(outlier.shape=NA)+facet_wrap(~IslandName,scales='free')+theme_JMS()+theme(axis.text.x=element_text(angle=90))
URCHINScomplete<-URCHINS %>%
complete(SiteCode,SurveyYear, current_sci_name) %>%
group_by(SurveyYear)
URCHINScomplete<-URCHINScomplete %>%
group_by(SiteCode,current_sci_name) %>%
mutate(YearDiff_TotalCount = TotalCount - lag(TotalCount)) # change in kelp count from one year to next
URCHINScomplete<-URCHINScomplete %>%
group_by(SiteCode,current_sci_name) %>%
mutate(YearDiff_MeanDensity_sqm = MeanDensity_sqm - lag(MeanDensity_sqm)) # change in kelp density from one year to next
ggplot(URCHINS,aes(x=ScientificName,y=log(TotalCount+1),fill=Status))+geom_boxplot(outlier.shape=NA)+facet_wrap(~IslandName,scales='free')+theme_JMS()+theme(axis.text.x=element_text(angle=90))
UrchinCount_1997<-URCHINScomplete %>% filter(SurveyYear==1997  & SiteName!='NA') %>%
ggplot(aes(x=SiteName,y=YearDiff_TotalCount,fill=current_sci_name))+geom_bar(stat='identity')+
theme_bw(base_size=15)+coord_flip()+
geom_hline(yintercept = 0,size=0.5,colour='black',lty=2)+theme(legend.text=element_text(face='italic'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_fill_manual(values = c("gray28", "snow3", "firebrick",'darkslateblue'),drop=FALSE)+
labs(fill='Sea Urchin Species',title='Year: 1997',y = 'Urchins (total #)', x = "Survey Sites")
UrchinCount_1997
UrchinDensity_1997<-URCHINScomplete %>% filter(SurveyYear==1997  & SiteName!='NA') %>%
ggplot(aes(x=SiteName,y=YearDiff_MeanDensity_sqm,fill=current_sci_name))+geom_bar(stat='identity')+
theme_bw(base_size=15)+coord_flip()+
geom_hline(yintercept = 0,size=0.5,colour='black',lty=2)+theme(legend.text=element_text(face='italic'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_fill_manual(values = c("gray28", "snow3", "firebrick",'darkslateblue'),drop=FALSE)+
labs(fill='Sea Urchin Species',title='Year: 1997',y = expression(paste("Urchin Density ", (m^-2))), x = "Survey Sites")
UrchinDensity_1997
# Urchin density/count across event phases
UrchinChange<-URCHINS %>% group_by(current_sci_name,Status,SurveyYear,IslandName,SiteName) %>% dplyr::summarize(meanAB=mean(TotalCount),sdAB=sd(TotalCount),meanDensity=mean(MeanDensity_sqm),sdDensity=sd(MeanDensity_sqm)) %>% ungroup()
# Baseline average site abundance and density (before El Nino; <1997)
UrchinChange1<-UrchinChange %>% filter(SurveyYear<1997) %>% group_by(current_sci_name,Status,IslandName,SiteName) %>% dplyr::summarize(meanAB=mean(meanAB),sdAB=sd(meanAB),meanDensity=mean(meanDensity),sdDensity=sd(meanDensity)) %>% ungroup()
UrchinChange1$SurveyYear<-as.numeric(0) # add 'year zero'
# Average site abundance in El Nino years and after
UrchinChange2<-UrchinChange %>% filter(SurveyYear>=1997) %>% group_by(current_sci_name,Status,SurveyYear,IslandName,SiteName) %>% dplyr::summarize(meanAB=mean(meanAB),sdAB=sd(meanAB),meanDensity=mean(meanDensity),sdDensity=sd(meanDensity)) %>% ungroup()
UrchinChange<-rbind(UrchinChange1,UrchinChange2) # combine baseline and event data
UrchinChange_t0<-UrchinChange %>% group_by(current_sci_name,SiteName) %>% dplyr::summarise(t0_meanAB = first(meanAB))
UrchinChange<-left_join(UrchinChange,UrchinChange_t0,by=c("current_sci_name" = "current_sci_name", "SiteName" = "SiteName"))
UrchinChange1<-UrchinChange %>%
mutate(log_ratio=log((meanAB)/(t0_meanAB)))
View(UrchinChange1)
UrchinChange1$log_ratio[is.na(UrchinChange1$log_ratio)] =0
UrchinChange1 %>% filter(IslandName !='San Clemente Island' & log_ratio!='Inf' & log_ratio!='-Inf') %>% group_by(current_sci_name,IslandName,SurveyYear) %>% dplyr::summarize(mean=mean(log_ratio),sd=sd(log_ratio)) %>% ggplot(aes(x=as.factor(SurveyYear),y=mean,colour=IslandName,group=IslandName))+ geom_point()+ geom_line()+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=position_dodge(0.05))+
facet_wrap(~current_sci_name,scales='free_y') +theme_JMS()+theme(axis.text.x=element_text(angle=45, hjust=1),strip.text = element_text(face = "italic",colour='white'),strip.background=element_rect(fill="black"))+xlab('Year')+ylab("Relative change (log(tx/t0))")+geom_hline(yintercept=0,linetype='dashed')
View(URCHINS)
ggplot(URCHINS,aes(x=Mean_C,y=MeanDensity_sqm,colour=IslandName))+geom_point()+facet_wrap(~current_sci_name,scale='free')+theme_JMS()
ggplot(URCHINS,aes(x=SurveyDate,y=MeanDensity_sqm,colour=IslandName))+geom_point()+facet_wrap(~current_sci_name,scale='free')+theme_JMS()
ggplot(URCHINS,aes(x=SurveyYear,y=MeanDensity_sqm,colour=IslandName))+geom_point()+facet_wrap(~current_sci_name,scale='free')+theme_JMS()
ggplot(URCHINS,aes(x=SurveyYear,y=MeanDensity_sqm,colour=IslandName))+geom_point()+facet_wrap(~current_sci_name,scale='free_y')+theme_JMS()
ggplot(URCHINS,aes(x=Mean_C,y=MeanDensity_sqm,colour=Status))+geom_point()+facet_wrap(~current_sci_name,scale='free')+theme_JMS()
ggplot(URCHINS,aes(x=Max_C,y=MeanDensity_sqm,colour=Status))+geom_point()+facet_wrap(~current_sci_name,scale='free')+theme_JMS()
ggplot(URCHINS,aes(x=Max_C,y=MeanDensity_sqm,colour=Status))+geom_point()+facet_wrap(~current_sci_name,scale='free')+theme_JMS()+geom_smooth()
ggplot(data=subset(URCHINS,SurveyYear>1994 & SurveyYear<2001),aes(x=Max_C,y=MeanDensity_sqm,colour=Status))+geom_point()+facet_wrap(~current_sci_name,scale='free')+theme_JMS()+geom_smooth()
ggplot(data=subset(URCHINS,SurveyYear>1994 & SurveyYear<2001), aes(x=Mean_C,y=MeanDensity_sqm,colour=Status))+ geom_point()+ facet_wrap(~current_sci_name,scale='free')+theme_JMS()+geom_smooth()+ scale_colour_manual(values=c('orange2','tomato2','gray69'),name="Event Status")
ggplot(data=subset(URCHINS,SurveyYear>1994 & SurveyYear<2001), aes(x=Mean_C,y=MeanDensity_sqm,colour=Status))+ geom_point()+ facet_wrap(~current_sci_name,scale='free_y')+theme_JMS()+geom_smooth()+ scale_colour_manual(values=c('orange2','tomato2','gray69'),name="Event Status")
ggplot(data=subset(DailyDiff,Year=='1996'),aes(x=as.factor(Date),y=DailyDiff))+geom_point()+facet_wrap(~IslandName)+
stat_summary(aes(y = DailyDiff,group=1), fun=mean, colour="orange", geom="line",group=1,lwd=1.2)+ggtitle("1996")+theme_bw(base_size=15)+
ylab('Temperature °C')+xlab("Date")+theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
CI_LatLongs<-SiteInfo %>% dplyr::select(SiteName,Inside.OutsideMarineReserve,Latitude_DD,Latitude_DMm,Latitude_DMS,Longitude_DD,Longitude_DMm,Longitude_DMS,MeanDepth_ft,Biogeographical_Province,Monitoring_Status,YearEstablished,MPA_YearEstablished) %>% droplevels()
#### CTI, CTDiv, CTR on MAP
SiteInfo_CTI<-left_join(SiteInfo,KFM_RovingFish_Diversity,by='SiteName')
SiteInfo <-read.csv("KFM_SiteInformation.csv")
# Reorganize Islands (warm to cold)
SiteInfo$IslandName <- factor(SiteInfo$IslandName,
levels = c("San Clemente Island",'Santa Barbara Island',"Anacapa Island",
"Santa Cruz Island", "Santa Rosa Island",
'San Miguel Island')) # order from warmest (left) to coldest (right)
CI_LatLongs<-SiteInfo %>% dplyr::select(SiteName,Inside.OutsideMarineReserve,Latitude_DD,Latitude_DMm,Latitude_DMS,Longitude_DD,Longitude_DMm,Longitude_DMS,MeanDepth_ft,Biogeographical_Province,Monitoring_Status,YearEstablished,MPA_YearEstablished) %>% droplevels()
DailyMean<-left_join(DailyMean,CI_LatLongs,by='SiteName')
Event_Temp<-aggregate(AvgOfTemp_C~SiteName+IslandName+Status+Latitude_DD+Longitude_DD,FUN=mean,data=subset(DailyMean,Year<2002))
# Before El Nino
ggplot(data = world) +
geom_sf() +
annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(
location = "bl",
which_north = "true",
pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(
xlim = c(min_long_map, max_long_map),
ylim = c(min_lat_map, max_lat_map)) +
geom_point(
data = subset(Event_Temp,Status=='Before El Niño'),
aes(x = Longitude_DD,
y = Latitude_DD,
colour=AvgOfTemp_C),size = 3)+scale_colour_gradient(low = "blue", high = "red", na.value = NA,name="Average\nTemperature")+
labs(x = "Longitude", y = "Latitude")+theme(legend.position='bottom')+theme_JMS()+ggtitle("Before El Niño (1993-96)")
world <- ne_countries(scale = "medium", returnclass = "sf")
max_lat_map <- max(SiteInfo$Latitude_DD) + 0.25
min_lat_map <- min(SiteInfo$Latitude_DD) - 0.25
# Summarising monthly temps
MonthlyTemp = DailyMean %>%
mutate(Date = ymd(Date)) %>%
mutate_at(vars(Date), funs(year, month, day))
# Summarising monthly temps
MonthlyTemp = DailyMean %>%
mutate(Date = ymd(Date)) %>%
mutate_at(vars(Date), funs(year, month, day))
MonthlyTemp <- MonthlyTemp %>% group_by(IslandName,SiteCode,Year,month) %>%
dplyr::summarise(MonthMin=min(AvgOfTemp_C),MonthMean=mean(AvgOfTemp_C),
MonthMax=max(AvgOfTemp_C)) %>% ungroup()
MonthlyTemp$Month<- as.factor(month.abb[MonthlyTemp$month])
MonthlyTemp$Month <- factor(MonthlyTemp$Month,
levels = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'))
ggplot(data=subset(MonthlyTemp,Year==c(1994:2002)),aes(x=Month,y=MonthMean))+geom_point(colour='orange')+theme_bw(base_size=15)+facet_wrap(~Year,scale='free_y')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+stat_summary(aes(y = MonthMean,group=1), fun=mean, colour="orange", geom="line",group=1,lwd=1.2)+
stat_summary(aes(y = MonthMax,group=1), fun=max, colour="red", geom="line",group=1,lwd=1.2)+stat_summary(aes(y = MonthMin,group=1), fun=min, colour="blue", geom="line",group=1,lwd=1.2)+
ylab('Temperature °C')+xlab("Month")
ggplot(data=subset(DailyMean,Year=='1998'),aes(x=as.factor(Date),y=AvgOfTemp_C))+geom_point()+
facet_wrap(~IslandName)+stat_summary(aes(y = AvgOfTemp_C,group=1), fun=mean,
colour="orange", geom="line",group=1,lwd=1.2)+ggtitle("1998")+
theme_bw(base_size=15)+ylab('Temperature °C')+xlab("Date")+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# RANGE OF TEMP PER YEAR; FULL TIME SERIES
DailyMean %>% dplyr::summarize(mean_Temp=mean(AvgOfTemp_C), median_Temp=median(AvgOfTemp_C)) # average temp across whole time-series
ggplot(DailyMean,aes(x=as.factor(Year),y=AvgOfTemp_C,fill=as.factor(Status)))+ geom_boxplot()+theme_bw()+ stat_summary(aes(y = AvgOfTemp_C,group=1), fun=mean, colour="orange", geom="line",group=1,lwd=1.2)+
scale_fill_manual(values=c('orange2','tomato2','gray69'))+ labs(fill='Event status')+ ylab('Daily Temperatures °C')+ xlab("Year")+geom_hline(yintercept=15.02,linetype='dashed',colour='black',lwd=1.2)+ theme_JMS()+theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(data=subset(DailyMean,Year>1994 & Year <2001),aes(x=as.factor(Date2),y=AvgOfTemp_C,colour=as.factor(Year)))+
geom_point(alpha=0.5)+facet_wrap(~IslandName)+ stat_summary(aes(y = AvgOfTemp_C,group=1), fun=mean,
colour="black", geom="line",lwd=1.2)+ggtitle("Daily temperatures")+theme_bw(base_size=15)+ ylab('Temperature °C')+ xlab("Date")+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+geom_vline(xintercept=1997)+ scale_colour_manual(values=c('orange2','orange2','tomato2','tomato2','gray69','gray69'),name="Year")
View(YearlyTemp)
View(DailyMean)
ggplot(YearlyTemp,aes(x=Year,y=Mean_C))+geom_point()+facet_wrap(~SiteCode)
ggplot(YearlyTemp,aes(x=Year,y=Mean_C))+geom_point()+facet_wrap(~SiteCode)+theme_JMS
ggplot(YearlyTemp,aes(x=Year,y=Mean_C))+geom_point()+facet_wrap(~SiteCode)+theme_JMS()
YearlyTemp<-YearlyTemp %>%
mutate(Status = case_when(
Year <= 1996 ~ "Before El Niño",
Year > 1996 & Year< 1999 ~ "El Niño",
Year >= 1999 ~ "After El Niño"))
ggplot(YearlyTemp,aes(x=Year,y=Mean_C,colour=Status))+geom_point()+facet_wrap(~SiteCode)+theme_JMS()
